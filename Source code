                                                                        //Création de l'objet "bt" de type "KetaiBluetooth"
HScrollbar hs1;                                                                                //Création de l'objet "hs1" de type "HScrollbar"


/*---------------------------Variable liée au colonnes---------------------------------*/
float dim = 10;                                                                                //Taille de la colonnes (largeur)
float conso = 0;                                                                               //Consomation de la maison
float time=1;                                                                                  //Vitesse du graph
float decrementation = 12;                                                                     //Espace entre les colonnes (2) + taille colonnes (10) 
float postable = 0;                                                                            //Position du tableau
 
/*--------------------état des lampes (1 = ON, 0 = Off) -------------------------------*/      //Le fait que je n'utilise pas boolean ici viens du fait que je me sert de cette variable comme multiplieur dans la variable "conso". 
int lampeDeChevet = 0; 
int pc = 0;
int chauffageChambre = 0;
int lampeSalleDo = 0;
int tv = 0;
int hifi = 0;
int lampeSalon = 0;
int chauffageSalon = 0;
int frigo = 0;
int vaisselle = 0;
int lampeCuisine = 0;
int four = 0;
int tvSalle = 0;
int lampeSalle = 0;
int chauffageSalle = 0;
int hifiSalle = 0;

/*------------------------------------Config Clock-------------------------------------*/

int cx, cy;                                                                                    //Position de l'horloge
float secondsRadius;                                                                           //Position de l'aiguille des secondes
float minutesRadius;                                                                           //Position de l'aiguille des minutes
float hoursRadius;                                                                             //Position de l'aiguille des heures
float clockDiameter = 450;                                                                     //Taille de l'horloge
  

                                                                    //Variable de la température

/*----------------------------------Variables diverse----------------------------------*/

float hour = 3;                                                                                //variable de type float de l'heure
int hourInt;                                                                                   //variable de type int de l'heure
float tailleRect = 40;                                                                         //taille des boutons + et - en dessous de la clock
boolean click;     

/*-----------------------------Position initial des boutons----------------------------*/      //Comme on voit ici chaque bouton est dépendant de la position du boutons 1
float but1x;
float but1y = 130;

float but2x = but1x + 200;
float but2y = but1y;

float but3x = but1x + 300;
float but3y = but1y;

float but4x = but1x;
float but4y = but1y + 100;

float but5x = but1x + 200;
float but5y = but1y + 100;

float but6x = but1x + 300;
float but6y = but1y + 100;

float but7x = but1x;
float but7y = but1y + 200;

float but8x = but1x + 200;
float but8y = but1y + 200;

float but9x = but1x + 300;
float but9y = but1y + 200;

float but10x = but1x + 350 ;
float but10y = but1y;

float but11x = but1x + 350;
float but11y = but1y + 100;
 
float but12x = but1x + 350;
float but12y = but1y + 200;

float but13x = but1x ;
float but13y = but1y + 300 ;

float but14x = but1x + 200;
float but14y = but1y + 300;

float but15x = but1x + 300;
float but15y = but1y + 300;

float but16x = but1x + 350;
float but16y = but1y + 300;

/*-----------------------------Variable taille des boutons-----------------------------*/      //Le fait que j'utilise le terme diamètre viens du fait que les boutons étaient censés être cylindrique

int diambutX = 100;
int diambutY = 50;

/*------------------------------------Config Slide-------------------------------------*/

float posSlideX=450;                                                                           //Position X de la jauge
float posSlideY=80;                                                                            //Position Y de la jauge
float tX=20;                                                                                   //Taille X de la jauge
float tY=400;                                                                                  //Taille Y de la jauge
float x;                   

/*----------------------Identifaiant bluetooth de chaque boutons-----------------------*/      //Par exemple le boutons "B0" correspond au à la variable "x1" et ainsi de suite

byte x1=0x18;
byte x2=0x19;
byte x3=0x1A;
byte x4=0x1B;
byte x5=0x1D;
byte x6=0x1E;
byte x7=0x1F;
byte x8=0x20;
byte x9=0x21;
byte x10=0x22;
byte x11=0x23;
byte x12=0x24;
byte x13=0x25;
byte x14=0x26;
byte x15=0x27;
byte x16=0x28;

/*-------------------------------Déclaration des boutons-------------------------------*/      //Chaque boutons nécéssite 7 informations: Sa positions en X, sa positions en Y, son nom, son état initial, sa taille en X, sa taille en Y, et son identifiant bluetooth 

buttonBox Box1 = new buttonBox(but1x,but1y,"Lampe de Chevet",0,diambutX,diambutY,x1);
buttonBox Box2 = new buttonBox(but2x,but2y,"PC chambre",0,diambutX,diambutY,x2);
buttonBox Box3 = new buttonBox(but3x,but3y,"Chauff chambre",0,diambutX,diambutY,x3);
buttonBox Box4 = new buttonBox(but4x,but4y,"TV Salon",0,diambutX,diambutY,x4);
buttonBox Box5 = new buttonBox(but5x,but5y,"HI-FI Salon",0,diambutX,diambutY,x5);
buttonBox Box6 = new buttonBox(but6x,but6y,"Lampe Salon",0,diambutX,diambutY,x6);
buttonBox Box7 = new buttonBox(but7x,but7y,"Frigo",0,diambutX,diambutY,x7);
buttonBox Box8 = new buttonBox(but8x,but8y,"Lave-vaisselle",0,diambutX,diambutY,x8);
buttonBox Box9 = new buttonBox(but9x,but9y,"Lampe Cuisine",0,diambutX,diambutY,x9);
buttonBox Box10 = new buttonBox(but10x,but10y,"Lampe Salle de bain",0,diambutX,diambutY,x10);
buttonBox Box11 = new buttonBox(but11x,but11y,"Chauff Salon",0,diambutX,diambutY,x11);
buttonBox Box12 = new buttonBox(but12x,but12y,"Four electrique",0,diambutX,diambutY,x12);
buttonBox Box13 = new buttonBox(but13x,but13y,"TV S manger",0,diambutX,diambutY,x13);
buttonBox Box14 = new buttonBox(but14x,but14y,"Lampe S manger",0,diambutX,diambutY,x14);
buttonBox Box15 = new buttonBox(but15x,but15y,"Chauff S manger",0,diambutX,diambutY,x15);
buttonBox Box16 = new buttonBox(but16x,but16y,"HI-FI S manger",0,diambutX,diambutY,x16);

/*------------------------------Déclaration de la jauge--------------------------------*/

slideup temp = new slideup(posSlideX,posSlideY,tX,tY);

/*----------------------Déclaration du récupérateur de données-------------------------*/

launch bluetooth = new launch(x,hour);

/*----------------------------déclaration des objets colonnes--------------------------*/      //Chaque objet déclarer ici est une collones du tableaux. C'est le meilleur moyen que j'ai trouvé pour avoir un tableaux de taille variable.

graph B0 = new graph(time,dim,postable);                                                       //Création de l'objet "B0" de type "graph"
graph B1 = new graph(time,dim,postable - decrementation*1);                                    //          ""        "B1"    ""   "graph". Il est reculé de 1 fois l'espace entre chaque collones plus la taille d'une collone.
graph B2 = new graph(time,dim,postable - decrementation*2);                                    //          ""        "B2"    ""   "graph".        ""        2           ""          ""          ""          ""          ""    .
graph B3 = new graph(time,dim,postable - decrementation*3);                                    //          ""        "B3"    ""   "graph".        ""        3           ""          ""          ""          ""          ""    .
graph B4 = new graph(time,dim,postable - decrementation*4);                                    //          ""        "B4"    ""   "graph".        ""        4           ""          ""          ""          ""          ""    .
graph B5 = new graph(time,dim,postable - decrementation*5);                                    //          ""        "B5"    ""   "graph".        ""        5           ""          ""          ""          ""          ""    .
graph B6 = new graph(time,dim,postable - decrementation*6);                                    //          ""        "B6"    ""   "graph".        ""        6           ""          ""          ""          ""          ""    .
graph B7 = new graph(time,dim,postable - decrementation*7);                                    //          ""        "B7"    ""   "graph".        ""        7           ""          ""          ""          ""          ""    .
graph B8 = new graph(time,dim,postable - decrementation*8);                                    //          ""        "B8"    ""   "graph".        ""        8           ""          ""          ""          ""          ""    .
graph B9 = new graph(time,dim,postable - decrementation*9);                                    //          ""        "B9"    ""   "graph".        ""        9           ""          ""          ""          ""          ""    .
graph B10 = new graph(time,dim,postable - decrementation*10);                                  //          ""        "B10"    ""   "graph".        ""        10           ""          ""          ""          ""          ""    .
graph B11 = new graph(time,dim,postable - decrementation*11);                                  //          ""        "B11"    ""   "graph".        ""        11           ""          ""          ""          ""          ""    .
graph B12 = new graph(time,dim,postable - decrementation*12);                                  //          ""        "B12"    ""   "graph".        ""        12           ""          ""          ""          ""          ""    .
graph B13 = new graph(time,dim,postable - decrementation*13);                                  //          ""        "B13"    ""   "graph".        ""        13           ""          ""          ""          ""          ""    .
graph B14 = new graph(time,dim,postable - decrementation*14);                                  //          ""        "B14"    ""   "graph".        ""        14           ""          ""          ""          ""          ""    .
graph B15 = new graph(time,dim,postable - decrementation*15);                                  //          ""        "B15"    ""   "graph".        ""        15           ""          ""          ""          ""          ""    .
graph B16 = new graph(time,dim,postable - decrementation*16);                                  //          ""        "B16"    ""   "graph".        ""        16           ""          ""          ""          ""          ""    .
graph B17 = new graph(time,dim,postable - decrementation*17);                                  //          ""        "B17"    ""   "graph".        ""        17           ""          ""          ""          ""          ""    .

                                                                       //Boolean de click qui sert à savoir si on reste appuyé ou pas.



 void setup(){

  size(1024,600);                                                                              //Taille en pixels de l'écran: taille X, taille Y
  orientation(LANDSCAPE);                                                                      //Oriantation du programme en type paysage forcée
  noStroke();
   
  int radius = min(640, 360) / 2;                                                              //Taille de l'horloge définie selon une "box" 
  secondsRadius = radius * 0.72;  
  minutesRadius = radius * 0.60;
  hoursRadius = radius * 0.50;
  clockDiameter = radius * 1.8;
  
  cx = width / 2;                                                                              //Position X du centre de l'horloge
  cy = height / 2;                                                                             //Position Y du centre de l'horloge
  
  hs1 = new HScrollbar(0,height-62, width, 32, 16);                                            //Déclaration de la barre de défilement
  
//  bt = new KetaiBluetooth(this);                                  
  //bt.start();                                                                                  //Allumage du bluetooth
  //bt.connectDevice("0D:11:18:1C:0E:2B");                                                       //Adresse MAC de la carte bleutooth
  delay(500);                                                                                  //Il faut mettre un delais le temp de la connection bluetooth
}
 
 void draw()
{
  background(51);                                                                              //Définition de la couleur de l'arrière plan
  fill(0);                                                                                     //Ici on met une valeur par défaut pour les écritures pour éviter les bugs

  float cx = hs1.getPos()-width/2;                                                             //Actualisation de l'emplacement de l'horloge par rapport au curseur de la barrde de défilement
  posSlideX = hs1.getPos()-width/1.125;                                                        //Actualisation de la position de la jauge
  but1x = hs1.getPos()+width-850;                                                              //Actualisation de l'emplacement de boutons
  postable = hs1.getPos()-320;                                                                 //Actualisation de la variable de position du tableau
  
 /*------------------------Actalisation de l'emplacement des boutons-----------------*/
  
  but2x = but1x + 200;                                                                         //]
  but3x = but1x + 400;                                                                         //]
  but4x = but1x;                                                                               //]
  but5x = but1x + 200;                                                                         //]
  but6x = but1x + 400;                                                                         //]
  but7x = but1x;                                                                               //]
  but8x = but1x + 200;                                                                         //] Actualisation de la variable de positions des boutons
  but9x = but1x + 400;                                                                         //]
  but10x = but1x + 600;                                                                        //]
  but11x = but1x + 600;                                                                        //]
  but12x = but1x + 600;                                                                        //]
  but13x = but1x ;                                                                             //]
  but14x = but1x + 200;                                                                        //]
  but15x = but1x + 400;                                                                        //]
  but16x = but1x + 600;                                                                        //]
  

  Box1.update(but1x);                                                                          //]
  Box2.update(but2x);                                                                          //]
  Box3.update(but3x);                                                                          //]
  Box4.update(but4x);                                                                          //]
  Box5.update(but5x);                                                                          //]
  Box6.update(but6x);                                                                          //]
  Box7.update(but7x);                                                                          //]
  Box8.update(but8x);                                                                          //] Actualisation de la position des objet boutons
  Box9.update(but9x);                                                                          //]
  Box10.update(but10x);                                                                        //]
  Box11.update(but11x);                                                                        //]
  Box12.update(but12x);                                                                        //]
  Box13.update(but13x);                                                                        //]
  Box14.update(but14x);                                                                        //]
  Box15.update(but15x);                                                                        //]
  Box16.update(but16x);                                                                        //]
  
  
  /*--------------------------Actualisation de l'horloge-------------------------------*/
  fill(80);
  ellipse(cx, cy, clockDiameter, clockDiameter);
  
  // Angles for sin() and cos() start at 3 o'clock;
  // subtract HALF_PI to make them start at the top
  float s = map(0, 0, 60, 0, TWO_PI) - HALF_PI;
  float m = map(0 + norm(20, 0, 60), 0, 60, 0, TWO_PI) - HALF_PI; 
  float h = map(hour + norm(0, 0, 60), 0, 24, 0, TWO_PI * 2) - HALF_PI;
  
  // Draw the hands of the clock
  stroke(255);
  //strokeWeight(1);
  //line(cx, cy, cx + cos(s) * secondsRadius, cy + sin(s) * secondsRadius);
  strokeWeight(2);
  line(cx, cy, cx + cos(m) * minutesRadius, cy + sin(m) * minutesRadius);
  strokeWeight(4);
  line(cx, cy, cx + cos(h) * hoursRadius, cy + sin(h) * hoursRadius);
  
  // Draw the minute ticks
  strokeWeight(2);
  beginShape(POINTS);
  for (int a = 0; a < 360; a+=6) {
    float angle = radians(a);
    float x = cx + cos(angle) * secondsRadius;
    float y = cy + sin(angle) * secondsRadius;
    vertex(x, y);
  }
  endShape();
 
 if(hour == 1){hourInt = 1;}                                                                   //]
 if(hour == 2){hourInt = 2;}                                                                   //]
 if(hour == 3){hourInt = 3;}                                                                   //]
 if(hour == 4){hourInt = 4;}                                                                   //]
 if(hour == 5){hourInt = 5;}                                                                   //]
 if(hour == 6){hourInt = 6;}                                                                   //]
 if(hour == 7){hourInt = 7;}                                                                   //]
 if(hour == 8){hourInt = 8;}                                                                   //]
 if(hour == 9){hourInt = 9;}                                                                   //]
 if(hour == 10){hourInt = 10;}                                                                 //]
 if(hour == 11){hourInt = 11;}                                                                 //]
 if(hour == 12){hourInt = 12;}                                                                 //]
 if(hour == 13){hourInt = 13;}                                                                 //] Transformation de la variable float en int (un peu bourrin mais ca marche)
 if(hour == 14){hourInt = 14;}                                                                 //]
 if(hour == 15){hourInt = 15;}                                                                 //]
 if(hour == 16){hourInt = 16;}                                                                 //]
 if(hour == 17){hourInt = 17;}                                                                 //]
 if(hour == 18){hourInt = 18;}                                                                 //]
 if(hour == 19){hourInt = 19;}                                                                 //]
 if(hour == 20){hourInt = 20;}                                                                 //]
 if(hour == 21){hourInt = 21;}                                                                 //]
 if(hour == 22){hourInt = 22;}                                                                 //]
 if(hour == 23){hourInt = 23;}                                                                 //]
 if(hour == 24){hourInt = 0;}                                                                  //]
     
  fill(255);                                                                                   //Couleur du texte en blanc
  textSize(50);                                                                                //Taille du texte à 50px
  rect(cx-130,cy+160,tailleRect,tailleRect);                                                   //Affichage du bouton + sous l'horloge
  rect(cx+80,cy+160,tailleRect,tailleRect);                                                    //Affichage du bouton - 
  textSize(15);
  if(hourInt > 9)
  {
    text(hourInt,cx-20, cy+190);
  }
  if(hourInt < 10)                      //affichage de l'horoge numérique
  {
    text("0",cx-20, cy+190);
    text(hourInt,cx-10, cy+190);
  }
  text(":00",cx, cy+190);
  textSize(45);
  fill(0);
  text("+",cx+81,cy+195);
  text("-",cx-125,cy+195);
  textSize(20);
  
  
  conso = (lampeDeChevet*0.002*100)+(pc*0.03*100)+(chauffageChambre*0.1*100)+(lampeSalleDo*0.004*100)+(tv*0.02*100)+(hifi*0.005*100)+(lampeSalon*0.004*100)+(chauffageSalon*0.1*100)+(frigo*0.11*100)+(vaisselle*0.18*100)+(lampeCuisine*0.004*100)+(four*0.28*100)+(tvSalle*0.004*100)+(lampeSalle*0.004*100)+(chauffageSalle*0.1*100)+(hifiSalle*0.003*100);    //calcul de la consomation de la maison en pourcentage
  
  B0.update(postable,conso);
  B1.update(postable,conso);
  B2.update(postable,conso);
  B3.update(postable,conso);
  B4.update(postable,conso);
  B5.update(postable,conso);
  B6.update(postable,conso);
  B7.update(postable,conso);
  B8.update(postable,conso);
  B9.update(postable,conso);      //fonction update du tableau
  B10.update(postable,conso);
  B11.update(postable,conso);
  B12.update(postable,conso);
  B13.update(postable,conso);
  B14.update(postable,conso);
  B15.update(postable,conso);
  B16.update(postable,conso);
  B17.update(postable,conso);
  
  if(mousePressed)
  {
    if(mouseX >= posSlideX && mouseX <= posSlideX + tX && mouseY >= posSlideY && mouseY <= posSlideY + tY && click == false)
    {
      temp.update(posSlideY-mouseY);                                                                                               //zone de click de la jauge
      x = temp.getPos();
    }
    if(mouseX >= cx+81 && mouseX <= (cx+81)+tailleRect && mouseY >= cy+160 && mouseY <= (cy+160)+tailleRect && click == false)
    {
      hour = hour + 1;
      if (hour == 25)
      {
        hour = 1;                                                                                                                  //zone de click du bouton + sous l'horloge
      }
      click = true;
    }
    
    if(mouseX >= cx-125 && mouseX <= (cx-125)+tailleRect && mouseY >= cy+160 && mouseY <= (cy+160)+tailleRect && click == false)
    {
      hour = hour - 1;
      if (hour == 0)
      {
        hour = 24;                                                                                                                    //zone de click du bouton - sous l'horloge
      }
      click = true;
    }
    if(mouseX >= but1x && mouseX <= but1x+diambutX && mouseY >= but1y && mouseY <= but1y+diambutY && click == false)
    {
      lampeDeChevet = Box1.change();
      click = true;                                                                                                                    //zone de click du boutons,1,2,3,....
      
    }
    if(mouseX >= but2x && mouseX <= but2x+diambutX && mouseY >= but2y && mouseY <= but2y+diambutY && click == false)
    {
      pc = Box2.change();
      click = true;
      
    }
    if(mouseX >= but3x && mouseX <= but3x+diambutX && mouseY >= but3y && mouseY <= but3y+diambutY && click == false)
    {
      chauffageChambre = Box3.change();
      click = true;
      
    }
    if(mouseX >= but4x && mouseX <= but4x+diambutX && mouseY >= but4y && mouseY <= but4y+diambutY && click == false)
    {
      tv = Box4.change();
      click = true;
      
    }
    if(mouseX >= but5x && mouseX <= but5x+diambutX && mouseY >= but5y && mouseY <= but5y+diambutY && click == false)
    {
      hifi = Box5.change();
      click = true;
      
    }
    if(mouseX >= but6x && mouseX <= but6x+diambutX && mouseY >= but6y && mouseY <= but6y+diambutY && click == false)
    {
      lampeSalon = Box6.change();
      click = true;
      
    }
    if(mouseX >= but7x && mouseX <= but7x+diambutX && mouseY >= but7y && mouseY <= but7y+diambutY && click == false)
    {
      frigo = Box7.change();
      click = true;
      
    }
    if(mouseX >= but8x && mouseX <= but8x+diambutX && mouseY >= but8y && mouseY <= but8y+diambutY && click == false)
    {
      vaisselle = Box8.change();
      click = true;
      
    }
    if(mouseX >= but9x && mouseX <= but9x+diambutX && mouseY >= but9y && mouseY <= but9y+diambutY && click == false)
    {
      lampeCuisine = Box9.change();
      click = true;
      
    }
    if(mouseX >= but10x && mouseX <= but10x+diambutX && mouseY >= but10y && mouseY <= but10y+diambutY && click == false)
    {
      lampeSalleDo = Box10.change();
      click = true;
      
    }
    if(mouseX >= but11x && mouseX <= but11x+diambutX && mouseY >= but11y && mouseY <= but11y+diambutY && click == false)
    {
      chauffageSalon = Box11.change();
      click = true;
      
    }
    if(mouseX >= but12x && mouseX <= but12x+diambutX && mouseY >= but12y && mouseY <= but12y+diambutY && click == false)
    {
      four = Box12.change();
      click = true;
      
    }
    if(mouseX >= but13x && mouseX <= but13x+diambutX && mouseY >= but13y && mouseY <= but13y+diambutY && click == false)
    {
      tvSalle = Box13.change();
      click = true;
      
    }
    if(mouseX >= but14x && mouseX <= but14x+diambutX && mouseY >= but14y && mouseY <= but14y+diambutY && click == false)
    {
      lampeSalle = Box14.change();
      click = true;
      
    }
    if(mouseX >= but15x && mouseX <= but15x+diambutX && mouseY >= but15y && mouseY <= but15y+diambutY && click == false)
    {
      chauffageSalle = Box15.change();
      click = true;
      
    }
    if(mouseX >= but16x && mouseX <= but16x+diambutX && mouseY >= but16y && mouseY <= but16y+diambutY && click == false)
    {
      hifiSalle = Box16.change();
      click = true;                                                                                                                  //jusqu'au boutons 16
      
    }
  }
  else
  {
    click = false;                                                                                                                    //pour éviter le clignotement du boutons en cas de maintient du boutons
  }
  
  temp.affichage(posSlideX);                                                                                                          //actualisation de la barre
   
  hs1.update();                                                                                                                       //} pparition de la barre de défilement
  hs1.display();                                                                                                                      //}

  bluetooth.getData(x,hour);
  
  delay(1);
}

//---------------------------------------------------------------------------------------------------------------------------------

//configuration des classes

/*======================classe de récupération et d'envoi des données=================*/
class launch{
  float temperature;
  float hlaunch;
  launch (float ret, float h)
  {
    temperature = ret;
    hlaunch = h;
  }  
  
void getData(float ret, float h)
  {
    temperature = ret;
    hlaunch = h;

    /*if(hlaunch == 1){byte[] tempData = {0x0}; bt.broadcast(tempData);}
    if(hlaunch == 2){byte[] tempData = {0x1}; bt.broadcast(tempData);}
    if(hlaunch == 3){byte[] tempData = {0x2}; bt.broadcast(tempData);}
    if(hlaunch == 4){byte[] tempData = {0x3}; bt.broadcast(tempData);}
    if(hlaunch == 5){byte[] tempData = {0x4}; bt.broadcast(tempData);}
    if(hlaunch == 6){byte[] tempData = {0x5}; bt.broadcast(tempData);}
    if(hlaunch == 7){byte[] tempData = {0x6}; bt.broadcast(tempData);}
    if(hlaunch == 8){byte[] tempData = {0x7}; bt.broadcast(tempData);}
    if(hlaunch == 9){byte[] tempData = {0x8}; bt.broadcast(tempData);}
    if(hlaunch == 10){byte[] tempData = {0x9}; bt.broadcast(tempData);}
    if(hlaunch == 11){byte[] tempData = {0xA}; bt.broadcast(tempData);}
    if(hlaunch == 12){byte[] tempData = {0xB}; bt.broadcast(tempData);}
    if(hlaunch == 13){byte[] tempData = {0xC}; bt.broadcast(tempData);}
    if(hlaunch == 14){byte[] tempData = {0xD}; bt.broadcast(tempData);}
    if(hlaunch == 15){byte[] tempData = {0xE}; bt.broadcast(tempData);}
    if(hlaunch == 16){byte[] tempData = {0xF}; bt.broadcast(tempData);}
    if(hlaunch == 17){byte[] tempData = {0x10}; bt.broadcast(tempData);}
    if(hlaunch == 18){byte[] tempData = {0x11}; bt.broadcast(tempData);}
    if(hlaunch == 19){byte[] tempData = {0x12}; bt.broadcast(tempData);}
    if(hlaunch == 20){byte[] tempData = {0x13}; bt.broadcast(tempData);}
    if(hlaunch == 21){byte[] tempData = {0x14}; bt.broadcast(tempData);}
    if(hlaunch == 22){byte[] tempData = {0x15}; bt.broadcast(tempData);}
    if(hlaunch == 23){byte[] tempData = {0x16}; bt.broadcast(tempData);}
    if(hlaunch == 24){byte[] tempData = {0x17}; bt.broadcast(tempData);}
    if((temperature >= -10) && (temperature < -9)){byte[] tempData = {0x29}; bt.broadcast(tempData);}
    if((temperature >= -9) && (temperature < -8)){byte[] tempData = {0x2A}; bt.broadcast(tempData);}
    if((temperature >= -8) && (temperature < -7)){byte[] tempData = {0x2B}; bt.broadcast(tempData);}
    if((temperature >= -7) && (temperature < -6)){byte[] tempData = {0x2C}; bt.broadcast(tempData);}
    if((temperature >= -6) && (temperature < -5)){byte[] tempData = {0x2D}; bt.broadcast(tempData);}
    if((temperature >= -5) && (temperature < -4)){byte[] tempData = {0x2E}; bt.broadcast(tempData);}
    if((temperature >= -4) && (temperature < -3)){byte[] tempData = {0x2F}; bt.broadcast(tempData);}
    if((temperature >= -3) && (temperature < -2)){byte[] tempData = {0x30}; bt.broadcast(tempData);}
    if((temperature >= -2) && (temperature < -1)){byte[] tempData = {0x31}; bt.broadcast(tempData);}
    if((temperature >= -1) && (temperature < 0)){byte[] tempData = {0x32}; bt.broadcast(tempData);}
    if((temperature >= 0) && (temperature < 1)){byte[] tempData = {0x33}; bt.broadcast(tempData);}
    if((temperature >= 1) && (temperature < 2)){byte[] tempData = {0x34}; bt.broadcast(tempData);}
    if((temperature >= 2) && (temperature < 3)){byte[] tempData = {0x35}; bt.broadcast(tempData);}
    if((temperature >= 3) && (temperature < 4)){byte[] tempData = {0x36}; bt.broadcast(tempData);}
    if((temperature >= 4) && (temperature < 5)){byte[] tempData = {0x37}; bt.broadcast(tempData);}
    if((temperature >= 5) && (temperature < 6)){byte[] tempData = {0x38}; bt.broadcast(tempData);}
    if((temperature >= 6) && (temperature < 7)){byte[] tempData = {0x39}; bt.broadcast(tempData);}
    if((temperature >= 7) && (temperature < 8)){byte[] tempData = {0x3A}; bt.broadcast(tempData);}
    if((temperature >= 8) && (temperature < 9)){byte[] tempData = {0x3B}; bt.broadcast(tempData);}
    if((temperature >= 9) && (temperature < 10)){byte[] tempData = {0x3C}; bt.broadcast(tempData);}
    if((temperature >= 10) && (temperature < 11)){byte[] tempData = {0x3D}; bt.broadcast(tempData);}
    if((temperature >= 11) && (temperature < 12)){byte[] tempData = {0x3E}; bt.broadcast(tempData);}
    if((temperature >= 12) && (temperature < 13)){byte[] tempData = {0x3F}; bt.broadcast(tempData);}
    if((temperature >= 13) && (temperature < 14)){byte[] tempData = {0x40}; bt.broadcast(tempData);}
    if((temperature >= 14) && (temperature < 15)){byte[] tempData = {0x41}; bt.broadcast(tempData);}
    if((temperature >= 15) && (temperature < 16)){byte[] tempData = {0x42}; bt.broadcast(tempData);}
    if((temperature >= 16) && (temperature < 17)){byte[] tempData = {0x43}; bt.broadcast(tempData);}
    if((temperature >= 17) && (temperature < 18)){byte[] tempData = {0x44}; bt.broadcast(tempData);}
    if((temperature >= 18) && (temperature < 19)){byte[] tempData = {0x45}; bt.broadcast(tempData);}
    if((temperature >= 19) && (temperature < 20)){byte[] tempData = {0x46}; bt.broadcast(tempData);}
    if((temperature >= 20) && (temperature < 21)){byte[] tempData = {0x47}; bt.broadcast(tempData);}
    if((temperature >= 21) && (temperature < 22)){byte[] tempData = {0x48}; bt.broadcast(tempData);}
    if((temperature >= 22) && (temperature < 23)){byte[] tempData = {0x49}; bt.broadcast(tempData);}
    if((temperature >= 23) && (temperature < 24)){byte[] tempData = {0x4A}; bt.broadcast(tempData);}
    if((temperature >= 24) && (temperature < 25)){byte[] tempData = {0x4B}; bt.broadcast(tempData);}
    if((temperature >= 25) && (temperature < 26)){byte[] tempData = {0x4C}; bt.broadcast(tempData);}
    if((temperature >= 26) && (temperature < 27)){byte[] tempData = {0x4D}; bt.broadcast(tempData);}
    if((temperature >= 27) && (temperature < 28)){byte[] tempData = {0x4E}; bt.broadcast(tempData);}
    if((temperature >= 28) && (temperature < 29)){byte[] tempData = {0x4F}; bt.broadcast(tempData);}
    if((temperature >= 29) && (temperature < 30)){byte[] tempData = {0x50}; bt.broadcast(tempData);}
    if((temperature >= 30) && (temperature < 31)){byte[] tempData = {0x51}; bt.broadcast(tempData);}
    if((temperature >= 31) && (temperature < 32)){byte[] tempData = {0x52}; bt.broadcast(tempData);}
    if((temperature >= 32) && (temperature < 33)){byte[] tempData = {0x53}; bt.broadcast(tempData);}
    if((temperature >= 33) && (temperature < 34)){byte[] tempData = {0x54}; bt.broadcast(tempData);}
    if((temperature >= 34) && (temperature < 35)){byte[] tempData = {0x55}; bt.broadcast(tempData);}
    if((temperature >= 35) && (temperature < 36)){byte[] tempData = {0x56}; bt.broadcast(tempData);}
    if((temperature >= 36) && (temperature < 37)){byte[] tempData = {0x57}; bt.broadcast(tempData);}
    if((temperature >= 37) && (temperature < 38)){byte[] tempData = {0x58}; bt.broadcast(tempData);}
    if((temperature >= 38) && (temperature < 39)){byte[] tempData = {0x59}; bt.broadcast(tempData);}
    if((temperature >= 39) && (temperature < 40)){byte[] tempData = {0x5A}; bt.broadcast(tempData);}
    if(temperature == 40){byte[] tempData = {0x5B}; bt.broadcast(tempData);}*/
  }
  
  
  
}



//=========================classe de la barre de défilelement============================================
class HScrollbar {
  int swidth, sheight;    // width and height of bar
  float xpos, ypos;       // x and y position of bar
  float spos, newspos;    // x position of slider
  float sposMin, sposMax; // max and min values of slider
  int loose;              // how loose/heavy
  boolean over;           // is the mouse over the slider?
  boolean locked;
  float ratio;

  HScrollbar (float xp, float yp, int sw, int sh, int l) {
    swidth = sw;
    sheight = sh;
    int widthtoheight = sw - sh;
    ratio = (float)sw / (float)widthtoheight;
    xpos = xp;
    ypos = yp-sheight/4;
    spos = xpos + swidth/1 - sheight/1;
    newspos = spos;
    sposMin = xpos;
    sposMax = xpos + swidth - sheight;
    loose = l;
  }

  void update() {
    if (overEvent()) {
      over = true;
    } else {
      over = false;
    }
    if (mousePressed && over) {
      locked = true;
    }
    if (!mousePressed) {
      locked = false;
    }
    if (locked) {
      newspos = constrain(mouseX-sheight/2, sposMin, sposMax);
    }
    if (abs(newspos - spos) > 1) {
      spos = spos + (newspos-spos)/loose;
    }
  }

  float constrain(float val, float minv, float maxv) {
    return min(max(val, minv), maxv);
  }

  boolean overEvent() {
    if (mouseX > xpos && mouseX < xpos+swidth &&
       mouseY > ypos && mouseY < ypos+sheight) {
      return true;
    } else {
      return false;
    }
  }

  void display() {
    noStroke();
    fill(204);
    rect(xpos, ypos, swidth, sheight);
    if (over || locked) {
      fill(0, 0, 0);
    } else {
      fill(102, 102, 102);
    }
    rect(spos, ypos, sheight, sheight);
  }

  float getPos() {
    // Convert spos to be values between
    // 0 and the total width of the scrollbar
    return spos * ratio;
  }
}



/*======================classe de la jauge=======================*/

class slideup
{
  float posX, posY, tailleX, tailleY, posCurseur=0,ret, retBrut;
  slideup(float X, float Y, float x, float y)
  {
    posX = X;
    posY = Y;
    tailleX = x;
    tailleY = y;
  }
  
  void affichage (float X)
  {
    posX = X;
    fill(255);
    rect(posX,posY,tailleX,tailleY);
    fill(51);
    rect(posX,posY,tailleX,-posCurseur);
    fill(255);
    text(ret,posX+tailleX+10,retBrut);
    text("˚C",posX+tailleX+83,retBrut);
  }
  
  void update(float c)
  {
    posCurseur = c;
    retBrut = posY-posCurseur;
    ret=map(retBrut,480,80,-10,40);
    
  }
  float getPos()
  {
    return ret;
  }

}


/*============================classe du graphique=================================*/

class graph {
  float yconso, time, xpos;
  graph (float t, float y, float x)
  {
    yconso = 0; //récupération des variables de création d'objets
    time = t;
    xpos = x;
  }
  void update(float pox, float azer) {
    xpos = xpos + time; //avancé de la colonne  
    if ( xpos > 215)//si arrivé en bout de course
    {
      yconso = azer;
      xpos =0;
    }
    noStroke();
    fill(255);
    rect(pox+xpos,height -150,10,-(yconso*3));//apparition du rectangle
    fill(51);
    rect(pox,height-450,15,300);
    rect(pox+215,height-450,15,300);
    fill(255);
    text("-------------------------9550W", pox, height-430);
    text("-------------------------4775W", pox, height-286);
    text("-------------------------0W", pox, height-142);
    
  }
     
   
}


/*==================================classe des boutons===============================*/

class buttonBox{
 int state;
 float x, y, diamX, diamY;
 String def;
 byte ID;
 buttonBox(float X,float Y,String defi,int stat,float dimX, float dimY, byte id)
 {
  x=X;
  y=Y;
  def=defi;
  state = stat;
  diamX = dimX;
  diamY = dimY;
  ID = id;
  
 }
 void update(float X){
   x=X;
   fill(255*state);
   rect(x, y, diamX, diamY);
   fill(255);
   text(def,x-10,y-1);
 }
 int change()
 {
   if (state == 0){state = 1;}
   else if (state == 1){state = 0;}
   byte[] Data = {ID}; 
   //bt.broadcast(Data);
   
   return state;
 }
 
 void forceState(int stat){
   state = stat;
 }
 
}

//================Annexe==========================

/*if((tablDataAfter[0]+1 == tablDataBefo[0]) || (tablDataAfter[0] == tablDataBefo[0]+1)){byte[] tempData = {0x18}; bt.broadcast(tempData);}
    if((tablDataAfter[1]+1 == tablDataBefo[1]) || (tablDataAfter[1] == tablDataBefo[1]+1)){byte[] tempData = {0x19}; bt.broadcast(tempData);}
    if((tablDataAfter[2]+1 == tablDataBefo[2]) || (tablDataAfter[2] == tablDataBefo[2]+1)){byte[] tempData = {0x1A}; bt.broadcast(tempData);}
    if((tablDataAfter[3]+1 == tablDataBefo[3]) || (tablDataAfter[3] == tablDataBefo[3]+1)){byte[] tempData = {0x1B}; bt.broadcast(tempData);}
    if((tablDataAfter[4]+1 == tablDataBefo[4]) || (tablDataAfter[4] == tablDataBefo[4]+1)){byte[] tempData = {0x1D}; bt.broadcast(tempData);}
    if((tablDataAfter[5]+1 == tablDataBefo[5]) || (tablDataAfter[5] == tablDataBefo[5]+1)){byte[] tempData = {0x1E}; bt.broadcast(tempData);}
    if((tablDataAfter[6]+1 == tablDataBefo[6]) || (tablDataAfter[6] == tablDataBefo[6]+1)){byte[] tempData = {0x1F}; bt.broadcast(tempData);}
    if((tablDataAfter[7]+1 == tablDataBefo[7]) || (tablDataAfter[7] == tablDataBefo[7]+1)){byte[] tempData = {0x20}; bt.broadcast(tempData);}
    if((tablDataAfter[8]+1 == tablDataBefo[8]) || (tablDataAfter[8] == tablDataBefo[8]+1)){byte[] tempData = {0x21}; bt.broadcast(tempData);}
    if((tablDataAfter[9]+1 == tablDataBefo[9]) || (tablDataAfter[9] == tablDataBefo[9]+1)){byte[] tempData = {0x22}; bt.broadcast(tempData);}
    if((tablDataAfter[10]+1 == tablDataBefo[10]) || (tablDataAfter[10] == tablDataBefo[10]+1)){byte[] tempData = {0x23}; bt.broadcast(tempData);}
    if((tablDataAfter[11]+1 == tablDataBefo[11]) || (tablDataAfter[11] == tablDataBefo[11]+1)){byte[] tempData = {0x24}; bt.broadcast(tempData);}
    if((tablDataAfter[12]+1 == tablDataBefo[12]) || (tablDataAfter[12] == tablDataBefo[12]+1)){byte[] tempData = {0x25}; bt.broadcast(tempData);}
    if((tablDataAfter[13]+1 == tablDataBefo[13]) || (tablDataAfter[13] == tablDataBefo[13]+1)){byte[] tempData = {0x26}; bt.broadcast(tempData);}
    if((tablDataAfter[14]+1 == tablDataBefo[14]) || (tablDataAfter[14] == tablDataBefo[14]+1)){byte[] tempData = {0x27}; bt.broadcast(tempData);}
    if((tablDataAfter[15]+1 == tablDataBefo[15]) || (tablDataAfter[15] == tablDataBefo[15]+1)){byte[] tempData = {0x28}; bt.broadcast(tempData);}*/
